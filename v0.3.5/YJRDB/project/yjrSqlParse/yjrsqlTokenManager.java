/* Generated By:JavaCC: Do not edit this line. yjrsqlTokenManager.java */
package yjrSqlParse;
import java.util.Vector;
import staticContent.*;
import YJRdataBase.*;

/** Token Manager. */
public class yjrsqlTokenManager implements yjrsqlConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1c1007ffffffe0L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 0;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         if ((active0 & 0x1c0007ffdfffe0L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
            return 0;
         }
         return -1;
      case 2:
         if ((active0 & 0x50080020L) != 0L)
            return 0;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x140007afd5ffc0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 2;
            }
            return 0;
         }
         return -1;
      case 3:
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x190000100L) != 0L)
            return 0;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x62fd5fac0L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
            return 0;
         }
         return -1;
      case 4:
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x223d5da80L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
            return 0;
         }
         if ((active0 & 0x40c002040L) != 0L)
            return 0;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x223c00280L) != 0L)
            return 0;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x15d800L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
            return 0;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000L) != 0L)
            return 0;
         if ((active0 & 0x5d800L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 6;
            return 0;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x40000L) != 0L)
            return 0;
         if ((active0 & 0x8800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x15000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 7;
            return 0;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x8800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x15000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 8;
            return 0;
         }
         return -1;
      case 9:
         if ((active0 & 0x15000L) != 0L)
            return 0;
         if ((active0 & 0x8800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 35;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 46);
      case 40:
         return jjStopAtPos(0, 53);
      case 41:
         return jjStopAtPos(0, 54);
      case 42:
         return jjStartNfaWithStates_0(0, 35, 0);
      case 43:
         return jjStopAtPos(0, 42);
      case 44:
         return jjStopAtPos(0, 55);
      case 45:
         return jjStopAtPos(0, 43);
      case 47:
         return jjStopAtPos(0, 45);
      case 59:
         return jjStopAtPos(0, 41);
      case 60:
         return jjStopAtPos(0, 48);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 62:
         return jjStopAtPos(0, 47);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000400000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2106000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80008040L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x11000020L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000020400L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000200000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x50000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x240081080L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800200L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x24100000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2404d0000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8002000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000040L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 0);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000011000220L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000002c500L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 0);
         return jjMoveStringLiteralDfa2_0(active0, 0x182000800L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 0);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xa002000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x220401000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000140L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1140000L);
      case 116:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x410080400L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x80400L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2820040L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x102000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x601418000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 0);
         break;
      case 112:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 0);
         break;
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200020000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 0);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 0);
         return jjMoveStringLiteralDfa5_0(active0, 0x20001000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 107:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 0);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80480L);
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 0);
         return jjMoveStringLiteralDfa5_0(active0, 0x1050000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 0);
         return jjMoveStringLiteralDfa5_0(active0, 0x2c04000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 0);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 0);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 0);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 0);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 103:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 0);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4800L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 0);
         break;
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 0);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 0);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x80400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 0);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80400L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x18000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x8800L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 0);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x8800L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8800L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 16, 0);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 12, 0);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 14, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff040000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 0:
                  if ((0x3ff040000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 37)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar != 46)
                     break;
                  kind = 37;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7fffffe90000000L & l) != 0L)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   5, 6, 7, 2, 3, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\151\156\164", "\146\154\157\141\164", 
"\163\164\162\151\156\147", "\142\157\157\154", "\165\156\151\161\165\145", 
"\156\157\164\40\156\165\154\154", "\160\162\151\155\141\162\171\40\153\145\171", 
"\163\161\154\144\145\146\141\165\154\164", "\143\150\145\143\153", "\143\157\156\163\164\162\141\151\156\164", 
"\146\157\162\145\151\147\156\40\153\145\171", "\162\145\146\145\162\145\156\143\145\163", 
"\156\157\40\141\143\164\151\157\156", "\162\145\163\164\162\151\143\164", "\163\145\164\40\156\165\154\154", 
"\143\141\163\143\141\144\145", "\157\156", "\144\145\154\145\164\145", "\165\160\144\141\164\145", 
"\151\156\163\145\162\164", "\143\162\145\141\164\145", "\164\141\142\154\145", "\167\150\145\162\145", 
"\151\156\164\157", "\166\141\154\165\145\163", "\163\145\164", "\146\162\157\155", 
"\144\162\157\160", "\163\145\154\145\143\164", "\141\154\164\145\162", null, null, null, null, 
null, null, "\73", "\53", "\55", "\52", "\57", "\45", "\76", "\74", "\75\75", 
"\141\156\144", "\157\162", "\156\157\164", "\50", "\51", "\54", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffe7fffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[9];
static private final int[] jjstateSet = new int[18];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public yjrsqlTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public yjrsqlTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         tokenImage = "";
      else
         tokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      tokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 35;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 5 :
         break;
      case 6 :
         break;
      case 7 :
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      case 35 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() && 
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 36 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 41 :
         break;
      case 42 :
         break;
      case 43 :
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      case 49 :
         break;
      case 50 :
         break;
      case 51 :
         break;
      case 52 :
         break;
      case 53 :
         break;
      case 54 :
         break;
      case 55 :
         break;
      default : 
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
