/* Generated By:JavaCC: Do not edit this line. yjrsqlTokenManager.java */
package yjrSqlParse;
import java.util.Vector;
import staticContent.*;
import YJRdataBase.*;

/** Token Manager. */
public class yjrsqlTokenManager implements yjrsqlConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe01ffffffe0L) != 0L)
         {
            jjmatchedKind = 46;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x40000200000L) != 0L)
            return 1;
         if ((active0 & 0xa01ffdfffe0L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0xa0050080420L) != 0L)
            return 1;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1afd5fbc0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x190000100L) != 0L)
            return 1;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x2fd5fac0L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x23d5da80L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0xc002040L) != 0L)
            return 1;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x15d800L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x23c00280L) != 0L)
            return 1;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x5d800L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x100000L) != 0L)
            return 1;
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x15000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x40000L) != 0L)
            return 1;
         if ((active0 & 0x8800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x15000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x8800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x15000L) != 0L)
            return 1;
         if ((active0 & 0x8800L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 37);
      case 40:
         return jjStopAtPos(0, 51);
      case 41:
         return jjStopAtPos(0, 52);
      case 42:
         return jjStopAtPos(0, 35);
      case 43:
         return jjStopAtPos(0, 33);
      case 44:
         return jjStopAtPos(0, 53);
      case 45:
         return jjStopAtPos(0, 34);
      case 47:
         return jjStopAtPos(0, 36);
      case 59:
         return jjStopAtPos(0, 50);
      case 60:
         return jjStopAtPos(0, 39);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 62:
         return jjStopAtPos(0, 38);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2106000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80008040L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x11000020L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000020400L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000200000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x50000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40081080L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800200L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x24100000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x404d0000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8002000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x20011000220L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000002c500L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x182000800L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xa002000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20401000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000140L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1140000L);
      case 116:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10080400L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x80400L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2820040L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x102000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x1418000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         break;
      case 112:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 1);
         break;
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x20001000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 107:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80480L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1050000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2c04000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 1);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 103:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4800L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 1);
         break;
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x80400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80400L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x18000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x8800L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x8800L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8800L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 16, 1);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 12, 1);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 14, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if (curChar == 37)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 39 && kind > 47)
                     kind = 47;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar != 46)
                     break;
                  kind = 45;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x7fffffe90000000L & l) != 0L)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   6, 7, 8, 3, 4, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\151\156\164", "\146\154\157\141\164", 
"\163\164\162\151\156\147", "\142\157\157\154", "\165\156\151\161\165\145", 
"\156\157\164\40\156\165\154\154", "\160\162\151\155\141\162\171\40\153\145\171", 
"\163\161\154\144\145\146\141\165\154\164", "\143\150\145\143\153", "\143\157\156\163\164\162\141\151\156\164", 
"\146\157\162\145\151\147\156\40\153\145\171", "\162\145\146\145\162\145\156\143\145\163", 
"\156\157\40\141\143\164\151\157\156", "\162\145\163\164\162\151\143\164", "\163\145\164\40\156\165\154\154", 
"\143\141\163\143\141\144\145", "\157\156", "\144\145\154\145\164\145", "\165\160\144\141\164\145", 
"\151\156\163\145\162\164", "\143\162\145\141\164\145", "\164\141\142\154\145", "\167\150\145\162\145", 
"\151\156\164\157", "\166\141\154\165\145\163", "\163\145\164", "\146\162\157\155", 
"\144\162\157\160", "\53", "\55", "\52", "\57", "\45", "\76", "\74", "\75\75", "\141\156\144", 
"\157\162", "\156\157\164", null, null, null, null, null, null, "\73", "\50", "\51", 
"\54", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3cffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[10];
static private final int[] jjstateSet = new int[20];
static protected char curChar;
/** Constructor. */
public yjrsqlTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public yjrsqlTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 10; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
